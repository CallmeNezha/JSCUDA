// Generated by CoffeeScript 1.10.0
(function() {
  var AbsoluteError, JC, assert, dumpMatrix;

  assert = require("assert");

  JC = require("../linear");

  AbsoluteError = 1e-6;

  JC.cudaDeviceInit();

  dumpMatrix = function(mat) {
    var c, j, k, oneRow, r, ref, ref1, results;
    results = [];
    for (r = j = 0, ref = mat.numRow; 0 <= ref ? j < ref : j > ref; r = 0 <= ref ? ++j : --j) {
      oneRow = "[";
      for (c = k = 0, ref1 = mat.numCol; 0 <= ref1 ? k < ref1 : k > ref1; c = 0 <= ref1 ? ++k : --k) {
        oneRow += mat.elements[c * mat.numRow + r] + " ";
      }
      oneRow += "]";
      results.push(console.log("" + oneRow));
    }
    return results;
  };

  describe("CUDA Base Utils Validation Check", function() {
    it("CUDA: cudaInitDevice", function(done) {
      assert.equal(typeof JC.cudaDeviceInit, 'function');
      return done();
    });
    return it("CUDA: cudaDeviceReset", function(done) {
      assert.equal(typeof JC.cudaDeviceReset, 'function');
      return done();
    });
  });

  describe("Linear Functions Validation Test", function() {
    it("vector add: ...", function() {
      var e, gpuResult, i, j, k, len, len1, meanError, num, start, testLength, v1h, v2h, vAd, vBd, warmUpLength;
      testLength = 1e6;
      warmUpLength = 10;
      v1h = new Float32Array((function() {
        var j, ref, results;
        results = [];
        for (num = j = 0, ref = warmUpLength; 0 <= ref ? j < ref : j > ref; num = 0 <= ref ? ++j : --j) {
          results.push(Math.random());
        }
        return results;
      })());
      vAd = new JC.VectorD(v1h.length, v1h);
      v2h = new Float32Array((function() {
        var j, ref, results;
        results = [];
        for (num = j = 0, ref = warmUpLength; 0 <= ref ? j < ref : j > ref; num = 0 <= ref ? ++j : --j) {
          results.push(Math.random());
        }
        return results;
      })());
      gpuResult = new Float32Array(warmUpLength);
      vBd = new JC.VectorD(warmUpLength);
      vBd.copyFrom(warmUpLength, v2h);
      start = Date.now();
      vAd.add(vBd);
      console.log("\tWarm up... JC " + warmUpLength + " elements vector add used:" + (Date.now() - start) + " ms");
      vAd.copyTo(warmUpLength, gpuResult);
      vAd.destroy();
      vBd.destroy();
      v1h = new Float32Array((function() {
        var j, ref, results;
        results = [];
        for (num = j = 0, ref = testLength; 0 <= ref ? j < ref : j > ref; num = 0 <= ref ? ++j : --j) {
          results.push(Math.random());
        }
        return results;
      })());
      vAd = new JC.VectorD(v1h.length, v1h);
      v2h = new Float32Array((function() {
        var j, ref, results;
        results = [];
        for (num = j = 0, ref = testLength; 0 <= ref ? j < ref : j > ref; num = 0 <= ref ? ++j : --j) {
          results.push(Math.random());
        }
        return results;
      })());
      gpuResult = new Float32Array(testLength);
      start = Date.now();
      vBd = new JC.VectorD(testLength);
      console.log("\tJC " + testLength + " elements vector add used:" + (Date.now() - start) + " ms");
      vBd.copyFrom(testLength, v2h);
      vAd.add(vBd);
      vAd.copyTo(testLength, gpuResult);
      vAd.destroy();
      vBd.destroy();
      start = Date.now();
      for (i = j = 0, len = v2h.length; j < len; i = ++j) {
        e = v2h[i];
        v1h[i] += e;
      }
      console.log("\tV8 " + testLength + " elements vector add used:" + (Date.now() - start) + " ms");
      meanError = 0;
      for (i = k = 0, len1 = v1h.length; k < len1; i = ++k) {
        e = v1h[i];
        meanError += Math.abs(e - gpuResult[i]);
      }
      meanError /= v1h.length;
      console.log("\tv8.CPU. vs jc.GPU. Mean absolute error: " + meanError + " , \<float32\> refer to IEEE-754");
      return assert((AbsoluteError > meanError && meanError > -AbsoluteError), "test failed");
    });
    return it("vector copy: ...", function() {
      var e, gpuResult, i, j, k, len, len1, meanError, num, start, testLength, v1h, v2h, vAd, vBd, warmUpLength;
      testLength = 1e6;
      warmUpLength = 10;
      v1h = new Float32Array((function() {
        var j, ref, results;
        results = [];
        for (num = j = 0, ref = warmUpLength; 0 <= ref ? j < ref : j > ref; num = 0 <= ref ? ++j : --j) {
          results.push(Math.random());
        }
        return results;
      })());
      vAd = new JC.VectorD(v1h.length, v1h);
      v2h = new Float32Array((function() {
        var j, ref, results;
        results = [];
        for (num = j = 0, ref = warmUpLength; 0 <= ref ? j < ref : j > ref; num = 0 <= ref ? ++j : --j) {
          results.push(Math.random());
        }
        return results;
      })());
      gpuResult = new Float32Array(warmUpLength);
      vBd = new JC.VectorD(warmUpLength);
      vBd.copyFrom(warmUpLength, v2h);
      start = Date.now();
      vAd.copy(vBd);
      console.log("\tWarm up... JC " + warmUpLength + " elements vector add used:" + (Date.now() - start) + " ms");
      vAd.copyTo(warmUpLength, gpuResult);
      vAd.destroy();
      vBd.destroy();
      v1h = new Float32Array((function() {
        var j, ref, results;
        results = [];
        for (num = j = 0, ref = testLength; 0 <= ref ? j < ref : j > ref; num = 0 <= ref ? ++j : --j) {
          results.push(Math.random());
        }
        return results;
      })());
      vAd = new JC.VectorD(v1h.length, v1h);
      v2h = new Float32Array((function() {
        var j, ref, results;
        results = [];
        for (num = j = 0, ref = testLength; 0 <= ref ? j < ref : j > ref; num = 0 <= ref ? ++j : --j) {
          results.push(Math.random());
        }
        return results;
      })());
      gpuResult = new Float32Array(testLength);
      start = Date.now();
      vBd = new JC.VectorD(testLength);
      console.log("\tJC " + testLength + " elements vector add used:" + (Date.now() - start) + " ms");
      vBd.copyFrom(testLength, v2h);
      vAd.copy(vBd);
      vAd.copyTo(testLength, gpuResult);
      vAd.destroy();
      vBd.destroy();
      start = Date.now();
      for (i = j = 0, len = v2h.length; j < len; i = ++j) {
        e = v2h[i];
        v1h[i] = e;
      }
      console.log("\tV8 " + testLength + " elements vector add used:" + (Date.now() - start) + " ms");
      meanError = 0;
      for (i = k = 0, len1 = v1h.length; k < len1; i = ++k) {
        e = v1h[i];
        meanError += Math.abs(e - gpuResult[i]);
      }
      meanError /= v1h.length;
      console.log("\tv8.CPU. vs jc.GPU. Mean absolute error: " + meanError + " , \<float32\> refer to IEEE-754");
      return assert((AbsoluteError > meanError && meanError > -AbsoluteError), "test failed");
    });
  });

}).call(this);

//# sourceMappingURL=linearTest.js.map
